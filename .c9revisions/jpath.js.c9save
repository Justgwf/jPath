{"ts":1351862394628,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//jpath.js - is a library that allows filtering of JSON data based on pattern-like expression\n(function(Array, undef) {\t\n\tvar \n\t\tTRUE = !0,\n\t\tFALSE = !1,\n\t\tSTRING = \"string\",\n\t\tFUNCTION = \"function\",\n\t\tPERIOD = \".\",\n\t\tSPACE = '',\n\t\tFLAGS = 'g',\n\t\tNULL = null,\n\t\t\n\t\trxTokens = new RegExp(\"([A-Za-z0-9_\\\\*@\\\\$]+(?:\\\\[.+?\\\\])?)\", FLAGS),\n\t\trxIndex = new RegExp(\"(\\\\S+)\\\\[(\\\\d+)\\\\]\"),\n\t\trxPairs = new RegExp(\"([\\\\w@\\\\.]+)\\\\s*([~><\\\\^\\\\*\\\\$\\\\!=]=?|\\\\?)\\\\s*([@\\\\w\\\\s_\\\\'\\$\\\\.\\\\+-]+)(\\\\s*|$)\", FLAGS),\n\t\trxCondition = new RegExp(\"(\\\\S+)\\\\[(.+)\\\\]\"),\n\t\ttrimBefore = new RegExp(\"^\\\\s\\\\s*\"),\n\t\ttrimAfter = new RegExp(\"\\\\s\\\\s*$\"),\n\t\t\n\t\tapp = Array.prototype.push,\n\t\tapc = Array.prototype.concat,\n\t\t\n\t\thidden = {\n\t\t\ttrim: function( s ) {\n\t\t\t\treturn s.replace(trimBefore, SPACE).replace(trimAfter, SPACE);\n\t\t\t},\n\t\t\ttoArray: function(o) {\n\t\t\t\treturn o instanceof Array? o : (o === undef || o === NULL) ? []:[o];\n\t\t\t},\n\t\t\ttraverse: function(pattern, cfn, obj){\n\t\t\t\tvar out, data = (obj || this.data), temp, tokens, token, idxToken, index, expToken, condition, tail, self = arguments.callee, found, i, j, l;\n\t\t\t\tif(data && typeof(pattern) === STRING) {\n\t\t\t\t\ttokens = pattern.match(rxTokens); //dot notation splitter\n\t\t\t\t\t//Get first token\n\t\t\t\t\ttoken = tokens[0];\n\t\t\t\t\t//Trailing tokens\n\t\t\t\t\ttail = tokens.slice(1).join(PERIOD);\n\t\t\t\t\t\n\t\t\t\t\tif( data instanceof Array ) {\n\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\tfor(i = 0, l = data.length; l > i; i++) {\n\t\t\t\t\t\t\tj = data[i];\n\t\t\t\t\t\t\tfound = self.apply(this, [token, NULL, j]);\n\t\t\t\t\t\t\tif(((found instanceof Array) && found.length) || found !== undef) {\n\t\t\t\t\t\t\t\tapp.apply(temp, [found]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(temp.length) {\n\t\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, temp]) : temp;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(token === \"*\") {\n\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, data]) : data;\n\t\t\t\t\t} else if(data[token] !== undef) {\n\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, data[token]]) : data[token];\n\t\t\t\t\t} else if( rxIndex.test(token) ) {\n\t\t\t\t\t\tidxToken = token.match(rxIndex);\n\t\t\t\t\t\ttoken = idxToken[1];\n\t\t\t\t\t\tindex = +idxToken[2];\n\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, data[token][index]]) : data[token][index];\n\t\t\t\t\t} else if( rxCondition.test(token) ) {\n\t\t\t\t\t\texpToken = token.match(rxCondition);\n\t\t\t\t\t\ttoken = expToken[1];\n\t\t\t\t\t\tcondition = expToken[2];\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar evalStr, isMatch, subset = data[token], elem;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(subset instanceof Array) {\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\t//Second loop here is faster than recursive call\n\t\t\t\t\t\t\tfor(i = 0, l = subset.length; l > i; i++) {\n\t\t\t\t\t\t\t\telem = subset[i];\n\t\t\t\t\t\t\t\t//Convert condition pairs to booleans\n\t\t\t\t\t\t\t\tevalStr = condition.replace(rxPairs, function($0, $1, $2, $3) {\n\t\t\t\t\t\t\t\t\treturn hidden.testPairs.apply(elem, [$1, $3, $2, cfn]);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t//Evaluate expression\n\t\t\t\t\t\t\t\tisMatch = eval(evalStr);\n\t\t\t\t\t\t\t\tif(isMatch) {\n\t\t\t\t\t\t\t\t\tapp.apply(temp, [elem]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(temp.length) {\n\t\t\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, temp]) : temp;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem = data;\n\t\t\t\t\t\t\t//Convert condition pairs to booleans\n\t\t\t\t\t\t\tevalStr = condition.replace(rxPairs, function($0, $1, $2, $3) {\n\t\t\t\t\t\t\t\treturn hidden.testPairs.apply(elem, [$1, $3, $2, cfn]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t//Evaluate expression\n\t\t\t\t\t\t\tisMatch = eval(evalStr);\n\t\t\t\t\t\t\tif(isMatch) {\n\t\t\t\t\t\t\t\treturn tail ? self.apply(this, [tail, NULL, elem]) : elem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t},\n\t\t\t//Matches type of a to b\n\t\t\tmatchTypes: function(a, b) {\n\t\t\t\tvar _a, _b;\n\t\t\t\tswitch(typeof(a)) {\n\t\t\t\t\tcase STRING: _b = b+''; break;\n\t\t\t\t\tcase \"boolean\": _b = b === \"true\"?TRUE:FALSE; break;\n\t\t\t\t\tcase \"number\": _b = +b; break;\n\t\t\t\t\tcase \"date\": _b = new Date(b).valueOf(); _a = a.valueOf(); break;\n\t\t\t\t\tdefault: _b = b;\n\t\t\t\t}\n\t\t\t\tif(b === \"null\") { _b = NULL; }\n\t\t\t\tif(b === \"undefined\") { _b = void(0); }\n\t\t\t\treturn {left:(_a||a), right:_b};\n\t\t\t},\n\t\t\ttestPairs: function(left, right, operator, fn) {\n\t\t\t\tvar out = FALSE, \n\t\t\t\t\tleftVal = left.indexOf(PERIOD) !== -1 ? hidden.traverse(left, NULL, this) : this[left],\n\t\t\t\t\tpairs = hidden.matchTypes(leftVal, hidden.trim(right));\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase \"=\": out = (pairs.left === pairs.right); break;\n\t\t\t\t\tcase \"==\": out = (pairs.left === pairs.right); break;\n\t\t\t\t\tcase \"!=\": out = (pairs.left !== pairs.right); break;\n\t\t\t\t\tcase \"^=\": out = (pairs.left+'').indexOf(pairs.right) === 0; break;\n\t\t\t\t\tcase \"<\": out = (pairs.left < pairs.right); break;\n\t\t\t\t\tcase \"<=\": out = (pairs.left <= pairs.right); break;\n\t\t\t\t\tcase \">\": out = (pairs.left > pairs.right); break;\n\t\t\t\t\tcase \">=\": out = (pairs.left >= pairs.right); break;\n\t\t\t\t\tcase \"~=\": out = ((pairs.left+'').toLowerCase() === (pairs.right+'').toLowerCase()); break;\n\t\t\t\t\tcase \"$=\": out = new RegExp(pairs.right+\"$\", \"i\").test(pairs.left); break;\n\t\t\t\t\tcase \"*=\": out = (pairs.left+'').indexOf(pairs.right)!==-1; break;\n\t\t\t\t\tcase \"?\": if(typeof(fn) === FUNCTION) { out = fn.call(this, left, right); } break;\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t},\n\t\t\tmerge: function(pattern) {\n\t\t\t\tvar out = [], temp = hidden.toArray(pattern ? hidden.traverse.apply(this, arguments) : this.selection);\n\t\t\t\tout = apc.apply([], temp);\n\t\t\t\treturn out;\n\t\t\t}\n\t\t},\n\t\n\tmodule = {};\n\t\n\t\n\tfunction JPath(obj) {\n\t\tif(!(this instanceof JPath)) {\n\t\t\treturn new JPath(obj);\t\n\t\t}\n\t\tthis.data = obj || NULL;\n\t\tthis.selection = [];\n\t}\n\t\n\tJPath.prototype = {\n\t\t//Sets JSON object source on the fly\n\t\tfrom: function(obj) {\n\t\t\tthis.data = obj;\n\t\t\treturn this;\n\t\t},\n\t\t//Returns the first element value of the search\n\t\tfirst: function(){\n\t\t\treturn this.selection.length ? this.selection[0] : NULL;\t\t\n\t\t},\n\t\t//Returns the last element value of the search\n\t\tlast:function(){\n\t\t\treturn this.selection.length ? this.selection.slice(-1)[0] : NULL;\t\n\t\t},\n\t\t//Returns an exact element value specified by index position\n\t\teq: function(idx) {\n\t\t\treturn this.selection.length ? this.selection[idx] : NULL;\t\n\t\t},\n\t\t//Performs a search on the JSON object\n\t\tselect:function(pattern, cfn, obj){\n\t\t\tthis.selection = hidden.merge.apply(this, arguments);\n\t\t\treturn this;\n\t\t},\n\t\t//Appends result of additional search to original search results\n\t\tand: function(pattern) {\n\t\t\tthis.selection = this.selection.concat(hidden.merge.apply(this, arguments));\n\t\t\treturn this;\n\t\t},\n\t\t//Returns search results as an Array\n\t\tval: function() {\n\t\t\treturn this.selection;\t\n\t\t}\n\t};\n\t\n\t//Returns an insance if JPath object\n\t//@obj - JSON object\n\t//@pattern - <String> search pattern\n\t//@cfn - <Function> custom compare function. This function has two input arguments: @left, @right\n\tmodule.select = function(obj, pattern, cfn) {\n\t\treturn JPath(obj).select(pattern, NULL, cfn);\n\t};\n\n\t//Returns a result of the selection <Array>\n\t//WARNING: This function returns references to the values contained in JSON object, so if you modify them they will affect your JSON object.\n\t//@obj - JSON object\n\t//@pattern - <String> search pattern\n\t//@cfn - <Function> custom compare function. This function has two input arguments: @left, @right\n\tmodule.filter = function(obj, pattern, cfn) {\n\t\treturn JPath(obj).select(pattern, NULL, cfn).val();\n\t};\n\n\twindow.jPath = window.jPath || module;\n})(Array);"]],"start1":0,"start2":0,"length1":0,"length2":7192}]],"length":7192}
{"contributors":[],"silentsave":false,"ts":1351865748231,"patch":[[{"diffs":[[0,"ull,\n\t\t\n"],[-1,"\t\t"],[1,"        "],[0,"rxTokens"]],"start1":255,"start2":255,"length1":18,"length2":24},{"diffs":[[0,"_\\\\*@\\\\$"],[1,"\\\\(\\\\)"],[0,"]+(?:\\\\["]],"start1":305,"start2":305,"length1":16,"length2":22},{"diffs":[[0,"\\])?)\", "],[-1,"FLAGS),\n\t"],[1,"\"g\"),\n    "],[0,"\trxIndex"]],"start1":331,"start2":331,"length1":25,"length2":26},{"diffs":[[0,"x = "],[-1,"new RegExp(\"(\\"],[1,"/^("],[0,"\\S+)\\"],[-1,"\\["],[1,"("],[0,"(\\"],[-1,"\\"],[0,"d+)\\"],[-1,"\\]\")"],[1,")$/"],[0,",\n\t\t"]],"start1":356,"start2":356,"length1":40,"length2":26},{"diffs":[[0,"[\\\\w@\\\\."],[1,"\\\\(\\\\)"],[0,"]+)\\\\s*("]],"start1":405,"start2":405,"length1":16,"length2":22},{"diffs":[[0,"s*(["],[-1,"@"],[0,"\\\\"],[-1,"w\\\\s_\\\\'\\$\\\\.\\\\+-"],[1,"S "],[0,"]+)("]],"start1":454,"start2":454,"length1":28,"length2":12},{"diffs":[[0,"s*|$)\", "],[-1,"FLAGS"],[1,"\"g\""],[0,"),\n\t\trxC"]],"start1":468,"start2":468,"length1":21,"length2":19}]],"length":7179,"saved":false}
{"ts":1351865764944,"patch":[[{"diffs":[[0,"\"),\n    "],[-1,"\t"],[1,"    "],[0,"rxIndex "]],"start1":341,"start2":341,"length1":17,"length2":20}]],"length":7182,"saved":false}
{"ts":1351865940667,"patch":[[{"diffs":[[0,"n, cfn, obj)"],[1," "],[0,"{\n\t\t\t\tvar ou"]],"start1":922,"start2":922,"length1":24,"length2":25},{"diffs":[[0,"s.data),"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"temp, to"]],"start1":968,"start2":968,"length1":17,"length2":22},{"diffs":[[0,".callee,"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"found, i"]],"start1":1063,"start2":1063,"length1":17,"length2":22},{"diffs":[[0,";\n\t\t\t\tif"],[1," "],[0,"(data &&"]],"start1":1091,"start2":1091,"length1":16,"length2":17},{"diffs":[[0,"D);\n"],[-1,"\t\t\t\t\t"],[1,"                    "],[0,"\n\t\t\t\t\tif"],[-1,"("],[0," "],[1,"("],[0,"data"]],"start1":1310,"start2":1310,"length1":23,"length2":38},{"diffs":[[0,"of Array"],[-1," "],[0,") {\n\t\t\t\t"]],"start1":1357,"start2":1357,"length1":17,"length2":16},{"diffs":[[0," = [];\n\t\t\t\t\t\tfor"],[1," "],[0,"(i = 0, l = data"]],"start1":1379,"start2":1379,"length1":32,"length2":33},{"diffs":[[0,"[token, "],[-1,"NULL"],[1,"cfn"],[0,", j]);\n\t"]],"start1":1487,"start2":1487,"length1":20,"length2":19},{"diffs":[[0,"\t\t\t\t\t\tif"],[1," "],[0,"(((found"]],"start1":1506,"start2":1506,"length1":16,"length2":17},{"diffs":[[0,"\t\t\t\t\t\t}\n\t\t\t\t\t\tif"],[1," "],[0,"(temp.length) {\n"]],"start1":1624,"start2":1624,"length1":32,"length2":33},{"diffs":[[0,"ly(this, [tail, "],[-1,"NULL"],[1,"cfn"],[0,", temp]) : temp;"]],"start1":1686,"start2":1686,"length1":36,"length2":35},{"diffs":[[0,"\t\t\t\t\treturn;"],[-1,"\t"],[0,"\n\t\t\t\t\t\t}\n\t\t\t"]],"start1":1739,"start2":1739,"length1":25,"length2":24},{"diffs":[[0," else if"],[1," "],[0,"(token ="]],"start1":1766,"start2":1766,"length1":16,"length2":17},{"diffs":[[0,"his, [tail, "],[-1,"NULL"],[1,"cfn"],[0,", data]) : d"]],"start1":1825,"start2":1825,"length1":28,"length2":27},{"diffs":[[0," else if"],[1," "],[0,"(data[to"]],"start1":1863,"start2":1863,"length1":16,"length2":17},{"diffs":[[0,"ly(this, [tail, "],[-1,"NULL"],[1,"cfn"],[0,", data[token]]) "]],"start1":1926,"start2":1926,"length1":36,"length2":35},{"diffs":[[0," else if"],[-1,"("],[0," "],[1,"("],[0,"rxIndex."]],"start1":1982,"start2":1982,"length1":18,"length2":18},{"diffs":[[0,"ndex.test(token)"],[-1," "],[0,") {\n\t\t\t\t\t\tidxTok"]],"start1":1995,"start2":1995,"length1":33,"length2":32},{"diffs":[[0,"dxToken[2];\n"],[1,"\t\t\t\t\t\ttemp = data[token];\n"],[0,"\t\t\t\t\t\treturn"]],"start1":2097,"start2":2097,"length1":24,"length2":50},{"diffs":[[0,"il, "],[-1,"NULL, data[token][index]]) : data[token][index]"],[1,"cfn, (temp && temp.length) ? temp[index] : temp]) : (temp && temp.length) ? temp[index] : temp"],[0,";\n\t\t"]],"start1":2175,"start2":2175,"length1":55,"length2":102},{"diffs":[[0," else if"],[-1,"("],[0," "],[1,"("],[0,"rxCondit"]],"start1":2281,"start2":2281,"length1":18,"length2":18},{"diffs":[[0,"t(token)"],[-1," "],[0,") {\n\t\t\t\t"]],"start1":2306,"start2":2306,"length1":17,"length2":16},{"diffs":[[0,"ken[2];\n"],[-1,"\t\t\t\t\t\t"],[1,"                        "],[0,"\n\t\t\t\t\t\tv"]],"start1":2411,"start2":2411,"length1":22,"length2":40},{"diffs":[[0,"subset ="],[1," token === \"*\" ? data :"],[0," data[to"]],"start1":2472,"start2":2472,"length1":16,"length2":39},{"diffs":[[0,"en],"],[-1," elem;"],[0,"\n\t\t\t\t\t\t"],[-1,"\n\t\t\t\t\t\tif(subset instanceof Array"],[1,"\telem;\n                            \n\t\t\t\t\t\tif ($.isArray(subset)"],[0,") {\n"]],"start1":2512,"start2":2512,"length1":54,"length2":78},{"diffs":[[0,"\t\t\t\t\tfor"],[-1,""],[0,""],[1," "],[0,"(i = 0, "]],"start1":2666,"start2":2666,"length1":16,"length2":17},{"diffs":[[0,"Str);\n\t\t\t\t\t\t\t\tif"],[-1,""],[0,""],[1," "],[0,"(isMatch) {\n\t\t\t\t"]],"start1":2994,"start2":2994,"length1":32,"length2":33},{"diffs":[[0,"\t\t\t\t\t\tif"],[1," "],[0,"(temp.le"]],"start1":3077,"start2":3077,"length1":16,"length2":17},{"diffs":[[0," [tail, "],[-1,"NULL"],[1,"cfn"],[0,", temp])"]],"start1":3140,"start2":3140,"length1":20,"length2":19},{"diffs":[[0,"\treturn;"],[-1,"\t"],[0,"\n\t\t\t\t\t\t\t"]],"start1":3191,"start2":3191,"length1":17,"length2":16},{"diffs":[[0,"\telem = "],[-1,"data"],[1,"subset"],[0,";\n\t\t\t\t\t\t"]],"start1":3230,"start2":3230,"length1":20,"length2":22},{"diffs":[[0,"\t\t\t\t\t\tif"],[1," "],[0,"(isMatch"]],"start1":3499,"start2":3499,"length1":16,"length2":17},{"diffs":[[0," [tail, "],[-1,"NULL"],[1,"cfn"],[0,", elem])"]],"start1":3558,"start2":3558,"length1":20,"length2":19},{"diffs":[[0,"\t\tswitch"],[1," "],[0,"(typeof("]],"start1":3716,"start2":3716,"length1":16,"length2":17},{"diffs":[[0,"\t\t\t\t"],[-1,"\t"],[0,"case "],[-1,"STRING: _b = b+''; "],[1,"\"string\":\n\t\t\t\t\t_b = b + '';\n\t\t\t\t\t"],[0,"break;\n"],[-1,"\t"],[0,"\t\t\t\t"]],"start1":3739,"start2":3739,"length1":41,"length2":53},{"diffs":[[0,"oolean\":"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_b = b ="]],"start1":3799,"start2":3799,"length1":17,"length2":22},{"diffs":[[0,"rue\""],[-1,"?"],[1," ? "],[0,"TRUE"],[-1,":"],[1," : "],[0,"FALSE;"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"break;\n"],[-1,"\t"],[0,"\t\t\t\t"]],"start1":3826,"start2":3826,"length1":29,"length2":37},{"diffs":[[0,"er\":"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_b = +b;"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"break;\n"],[-1,"\t"],[0,"\t\t\t\t"]],"start1":3873,"start2":3873,"length1":26,"length2":35},{"diffs":[[0," \"date\":"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_b = new"]],"start1":3912,"start2":3912,"length1":17,"length2":22},{"diffs":[[0,"lueOf();"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_a = a.v"]],"start1":3945,"start2":3945,"length1":17,"length2":22},{"diffs":[[0,"lueOf();"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"break;\n"],[-1,"\t"],[0,"\t\t\t\tdefa"]],"start1":3968,"start2":3968,"length1":25,"length2":29},{"diffs":[[0,"default:"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_b = b;\n"]],"start1":3993,"start2":3993,"length1":17,"length2":22},{"diffs":[[0," b;\n\t\t\t\t}\n\t\t\t\tif"],[1," "],[0,"(b === \"null\") {"]],"start1":4011,"start2":4011,"length1":32,"length2":33},{"diffs":[[0,"\") {"],[-1," _b = NULL; "],[1,"\n\t\t\t\t\t_b = null;\n\t\t\t\t"],[0,"}\n\t\t\t\tif"],[1," "],[0,"(b ="]],"start1":4040,"start2":4040,"length1":28,"length2":38},{"diffs":[[0,"ined\") {"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"_b = voi"]],"start1":4087,"start2":4087,"length1":17,"length2":22},{"diffs":[[0,"void(0);"],[-1," "],[1,"\n\t\t\t\t"],[0,"}\n\t\t\t\tre"]],"start1":4106,"start2":4106,"length1":17,"length2":21},{"diffs":[[0,"rn {"],[1,"\n\t\t\t\t\t"],[0,"left:"],[1," "],[0,"(_a"],[1," "],[0,"||"],[1," "],[0,"a),"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"right:"],[1," "],[0,"_b"],[1,"\n\t\t\t\t"],[0,"};\n\t"]],"start1":4129,"start2":4129,"length1":30,"length2":50},{"diffs":[[0,"tPairs: "],[1,"("],[0,"function"]],"start1":4190,"start2":4190,"length1":16,"length2":17},{"diffs":[[0,"ion("],[-1,"left, right, operator, fn) {\n\t\t\t\tvar out = FALSE, \n\t\t\t\t\tleftVal = left.indexOf(PERIOD) !== -1 ? hidden.traverse(left, NULL, this) : this[left],\n\t\t\t\t\tpairs = hidden.matchTypes(leftVal, hidden.trim(right));\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase \"=\": out = (pairs.left === pairs.right); break;\n\t\t\t\t\tcase \"==\": out = (pairs.left === pairs.right); break;"],[1,") {\n\t\t\t\tvar conditions = {\n\t\t\t\t\t\"=\": function(l, r) {\n\t\t\t\t\t\treturn l === r;\n\t\t\t\t\t},\n\t\t\t\t\t\"==\": function(l, r) {\n\t\t\t\t\t\treturn l === r;\n\t\t\t\t\t},"],[0,"\n\t\t\t\t\t"],[-1,"case "],[0,"\"!=\": "],[-1,"out = (pairs.left !== pairs.right); break;"],[1,"function(l, r) {\n\t\t\t\t\t\treturn l !== r;\n\t\t\t\t\t},"],[0,"\n\t\t\t\t\t"],[-1,"case "],[0,"\"^=\": "],[-1,"out = (pairs.left+'').indexOf(pairs.right) === 0; break;\n\t\t\t\t\tcase \"<\": out = (pairs.left < pairs.right); break;\n\t\t\t\t\tcase \"<=\": out = (pairs.left <= pairs.right); break;\n\t\t\t\t\tcase \">\": out = (pairs.left > pairs.right); break;"],[1,"function(l, r) {\n\t\t\t\t\t\treturn !((l + '').indexOf(r));\n\t\t\t\t\t},\n\t\t\t\t\t\"<\": function(l, r) {\n\t\t\t\t\t\treturn l < r;\n\t\t\t\t\t},\n\t\t\t\t\t\"<=\": function(l, r) {\n\t\t\t\t\t\treturn l <= r;\n\t\t\t\t\t},\n\t\t\t\t\t\">\": function(l, r) {\n\t\t\t\t\t\treturn l > r;\n\t\t\t\t\t},"],[0,"\n\t\t\t\t\t"],[-1,"case "],[0,"\">=\": "],[-1,"out = (pairs.left >= pairs.right); break;\n\t\t\t\t\tcase \"~=\": out = ((pairs.left+"],[1,"function(l, r) {\n\t\t\t\t\t\treturn l >= r;\n\t\t\t\t\t},\n\t\t\t\t\t\"~=\": function(l, r) {\n\t\t\t\t\t\treturn (l + "],[0,"'')."]],"start1":4204,"start2":4204,"length1":748,"length2":551},{"diffs":[[0,"() === ("],[-1,"pairs.right+"],[1,"r + "],[0,"'').toLo"]],"start1":4766,"start2":4766,"length1":28,"length2":20},{"diffs":[[0,"se()"],[-1,"); break;"],[1,";\n\t\t\t\t\t},"],[0,"\n\t\t\t\t\t"],[-1,"case "],[0,"\"$=\": "],[-1,"out = new RegExp(pairs.right+\"$\", \"i\").test(pairs.left); break;"],[1,"function(l, r) {\n\t\t\t\t\t\treturn new RegExp(r + \"$\", \"i\").test(l);\n\t\t\t\t\t},"],[0,"\n\t\t\t\t\t"],[-1,"case "],[0,"\"*=\": "],[-1,"out = (pairs.left+'').indexOf(pairs.right)"],[1,"function(l, r) {\n\t\t\t\t\t\treturn (l + '').indexOf(r) >= 0;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn function(left, right, operator, fn) {\n\t\t\t\t\tvar out = FALSE,\n\t\t\t\t\t\tleftVal = left.indexOf(PERIOD) "],[0,"!=="],[1," "],[0,"-1"],[-1,"; break;\n\t\t\t\t\tcase \"?\": if(typeof(fn) === FUNCTION) { "],[1," ? hidden.traverse(left, null, this) : this[left],\n\t\t\t\t\t\tpairs = hidden.matchTypes(leftVal, $.trim(right));\n\t\t\t\t\tif (operator === \"?\") {\n\t\t\t\t\t\tif ($.isFunction(fn)) {\n\t\t\t\t\t\t\t"],[0,"out "]],"start1":4791,"start2":4791,"length1":215,"length2":471},{"diffs":[[0,"l(this, "],[1,"pairs."],[0,"left, ri"]],"start1":5270,"start2":5270,"length1":16,"length2":22},{"diffs":[[0,"ht);"],[-1," } break"],[1,"\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout = conditions[operator](pairs.left, pairs.right)"],[0,";\n"],[1,"\t"],[0,"\t\t\t\t"]],"start1":5293,"start2":5293,"length1":18,"length2":91},{"diffs":[[0,"ht);\n\t\t\t\t\t}\n\t\t\t\t"],[1,"\t"],[0,"return out;\n\t\t\t}"]],"start1":5374,"start2":5374,"length1":32,"length2":33},{"diffs":[[0,"urn out;\n\t\t\t"],[-1,"}"],[1,"\t};\n\t\t\t})()"],[0,",\n\t\t\tmerge: "]],"start1":5394,"start2":5394,"length1":25,"length2":35},{"diffs":[[0,"ut = [],"],[-1," "],[1,"\n\t\t\t\t\t"],[0,"temp = h"]],"start1":5458,"start2":5458,"length1":17,"length2":22}]],"length":7588,"saved":false}
{"ts":1351866066045,"patch":[[{"diffs":[[0,"if ("],[-1,"$.isArray(subset)"],[1,"subset instanceof Array"],[0,") {\n"]],"start1":2565,"start2":2565,"length1":25,"length2":31},{"diffs":[[0,"eftVal, "],[-1,"$"],[1,"hidden"],[0,".trim(ri"]],"start1":5174,"start2":5174,"length1":17,"length2":22}]],"length":7599,"saved":false}
{"ts":1351866122386,"patch":[[{"diffs":[[0,"if ("],[-1,"$.isFunction(fn)"],[1,"typeof(fn) === FUNCTION"],[0,") {\n"]],"start1":5238,"start2":5238,"length1":24,"length2":31}]],"length":7606,"saved":false}
{"ts":1351866244048,"patch":[[{"diffs":[[0,"\n\t\t\t\t};\n"],[1,"                "],[0,"\n\t\t\t\tret"]],"start1":4967,"start2":4967,"length1":16,"length2":32}]],"length":7622,"saved":false}
